#
# Keyspace name and create CQL
#
keyspace: lucasdb_dt
keyspace_definition: |
  CREATE KEYSPACE lucasdb_dt WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 3};
#
# Table name and create CQL
#
table: iot_data_dt
table_definition: |
  CREATE TABLE iot_data_dt(
        device_id uuid,
        service_name text,
        observation_time timestamp,
        device_name text STATIC,
        observed_value float,
        PRIMARY KEY (device_id, service_name, observation_time)
  ) WITH CLUSTERING ORDER BY ( service_name ASC, observation_time DESC ) AND compression = {'enabled':'false'} AND compaction= {'class':'DateTieredCompactionStrategy', 'enabled':'true', 'max_threshold':32,'min_threshold':4,'log_all':true};

#
# Meta information for generating data
#
columnspec:
  - name: device_id
    size: fixed(32) #In chars, no. of chars of UUID
    population: seq(1..5000)  # We have about 600 hosts with equal events per host
  - name: service_name
    size: uniform(8..15)
    population: seq(1..3)
    cluster: fixed(3)
  - name: observation_time
    cluster: fixed(3600) 
  - name: device_name
    size: fixed(10)
    population: seq(1..5000) #igual o device_id porque e STATIC
  - name: observed_value
    size: fixed(4)
    population: GAUSSIAN(1..40,25,9)

# Specs for insert queries
#
insert:
  partitions: fixed(1)      # 1 partition per batch
  batchtype: UNLOGGED       # use unlogged batches
  select: fixed(1)/1      # no chance of skipping a row when generating inserts
 
#
# Read queries to run against the schema
#
queries:
   pull-for-rollup:
      cql: select * from iot_data_dt where device_id = ?
      fields: samerow             # pick selection values from same row in partition
   get-a-value:
      cql: select * from iot_data_dt where device_id = ? and service_name = ? and observation_time = ?
      fields: samerow             # pick selection values from same row in partition
   get-avg:
      cql: select device_id, avg(observed_value) FROM iot_data_dt where device_id = ?
      fields: samerow

